name: docs

# declare default permissions
permissions: read-all

on:
  # enable manual run via GitHub UI
  workflow_dispatch:
  
  # enable trigger via remote call webhook
  repository_dispatch:
    types: update-docs

  # enable run on "standard" updates to main branch
  push:
    branches: ["main"]

  pull_request:
    branches: ["main"]

env:
  CORE: ./core
  DOCS: ./docs
  DIST: ./docs/dist
  SITE: ./docs/src/content/docs
  WORK: ./docs/work

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: defenseunicorns/pepr
          path: ./core
          fetch-depth: 0  # pull history to get version tags

      - uses: actions/checkout@v4
        with:
          repository: defenseunicorns/pepr-docs
          path: ./docs

      - name: Build the docs!
        run: |
          CORE=$(realpath "$CORE")
          cd "$DOCS"
          npm ci
          node build/index.mjs --site unused --core "$CORE"
          npm run build

      - name: Commit changes to source!
        if: github.ref_name == 'main'
        run: |
          CONT_OLD=$(realpath "$SITE")
          CONT_NEW=$(realpath "$WORK/content")

          echo "Content source: $CONT_NEW"
          echo "Content target: $CONT_OLD"
          
          # Verify source content exists
          if [ ! -d "$CONT_NEW" ]; then
            echo "Error: Source content directory $CONT_NEW does not exist"
            exit 1
          fi

          # Copy main version content to root docs directory
          if [ -d "$CONT_NEW/main" ]; then
            echo "Copying main content..."
            # Safely remove existing content
            find "$CONT_OLD" -mindepth 1 -maxdepth 1 ! -name "v0.*" -exec rm -rf {} +
            # Copy main content
            cp --recursive "$CONT_NEW/main"/* "$CONT_OLD/"
          else
            echo "Warning: No main content found at $CONT_NEW/main"
          fi
          
          # Copy versioned content
          for version in v0.54 v0.53; do
            if [ -d "$CONT_NEW/$version" ]; then
              echo "Copying $version content..."
              rm --recursive --force "$CONT_OLD/$version" 2>/dev/null || true
              mkdir -p "$CONT_OLD/$version"
              cp --recursive "$CONT_NEW/$version"/* "$CONT_OLD/$version/"
            else
              echo "Warning: No $version content found at $CONT_NEW/$version"
            fi
          done

          cd "$DOCS"
          git config user.name "docs.yml"
          git config user.email "<>"
          git add --all

          if ! git diff-index --quiet HEAD; then
            echo "Changes detected, committing..."
            git commit -m "docs.yml"
            git push origin main
          else
            echo "No changes to commit"
          fi

      - name: Upload Artifacts!
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          retention-days: 1
          path: ./docs/dist


  deploy:
    if: github.ref_name == 'main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: defenseunicorns/pepr-docs
          ref: deploy
          path: ./docs

      - name: Clear previously deployed content!
        run: |
          cd "$DOCS"
          rm -rf dist

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./docs/dist

      - name: Deploy the docs!
        run: |
          BRANCH=deploy

          cd "$DOCS"
          git config user.name "docs.yml"
          git config user.email "<>"

          git add --all
          if ! git diff-index --quiet HEAD; then
            git commit -m "docs.yml"
            git push origin "$BRANCH"
          fi
