name: docs

# declare default permissions
permissions: read-all

on:
  # enable manual run via GitHub UI
  workflow_dispatch:
  
  # enable trigger via remote call webhook
  repository_dispatch:
    types: update-docs

  # enable run on "standard" updates to main branch
  push:
    branches: ["main"]

  pull_request:
    branches: ["main"]

env:
  CORE: ./core
  DOCS: ./docs
  DIST: ./docs/dist
  SITE: ./docs/src/content/docs
  WORK: ./docs/work

jobs:

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: defenseunicorns/pepr
          path: ./core
          fetch-depth: 0  # pull history to get version tags

      - uses: actions/checkout@v4
        with:
          repository: defenseunicorns/pepr-docs
          path: ./docs

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Build the docs!
        run: |
          CORE=$(realpath "$CORE")
          cd "$DOCS"
          npm ci
          
          # Build docs with proper error handling
          if ! node build/index.mjs --core "$CORE"; then
            echo "Error: Documentation build failed"
            exit 1
          fi
          
          if ! npm run build; then
            echo "Error: Astro build failed"
            exit 1
          fi

      - name: Commit changes to source!
        if: github.ref_name == 'main'
        run: |
          CONT_OLD=$(realpath "$SITE")
          CONT_NEW=$(realpath "$WORK/content")

          echo "Content source: $CONT_NEW"
          echo "Content target: $CONT_OLD"
          
          # Verify source content exists
          if [ ! -d "$CONT_NEW" ]; then
            echo "Error: Source content directory $CONT_NEW does not exist"
            exit 1
          fi

          # Copy main version content to root docs directory
          if [ -d "$CONT_NEW/main" ]; then
            echo "Copying main content..."
            
            # Create backup of existing content
            BACKUP_DIR="$(mktemp -d)"
            if [ -d "$CONT_OLD" ]; then
              cp -r "$CONT_OLD" "$BACKUP_DIR/content_backup" || echo "Warning: Could not create backup"
            fi
            
            # Safely remove existing content (preserve versioned dirs)
            for item in "$CONT_OLD"/*; do
              if [ -e "$item" ] && [[ "$(basename "$item")" != v0.* ]]; then
                rm -rf "$item"
              fi
            done
            
            # Copy main content with verification
            if cp -r "$CONT_NEW/main"/* "$CONT_OLD/" 2>/dev/null; then
              echo "Main content copied successfully"
              rm -rf "$BACKUP_DIR"
            else
              echo "Error: Failed to copy main content, attempting restore"
              if [ -d "$BACKUP_DIR/content_backup" ]; then
                cp -r "$BACKUP_DIR/content_backup"/* "$CONT_OLD/" || echo "Error: Restore failed"
              fi
              rm -rf "$BACKUP_DIR"
              exit 1
            fi
          else
            echo "Warning: No main content found at $CONT_NEW/main"
          fi
          
          # Copy versioned content dynamically
          echo "Discovering available versions..."
          if [ -d "$CONT_NEW" ]; then
            for version_dir in "$CONT_NEW"/v0.*; do
              if [ -d "$version_dir" ]; then
                version=$(basename "$version_dir")
                echo "Copying $version content..."
                
                # Remove existing version content
                rm -rf "$CONT_OLD/$version" 2>/dev/null || true
                mkdir -p "$CONT_OLD/$version"
                
                # Copy version content with verification
                if cp -r "$version_dir"/* "$CONT_OLD/$version/" 2>/dev/null; then
                  echo "$version content copied successfully"
                else
                  echo "Error: Failed to copy $version content"
                  exit 1
                fi
              fi
            done
          else
            echo "Warning: Content source directory not found"
          fi
          
          # Update Astro config with discovered versions
          echo "Updating Astro configuration..."
          cd "$DOCS"
          
          # Discover all version directories
          VERSIONS_JSON="["
          FIRST=true
          for version_dir in "$CONT_OLD"/v0.*; do
            if [ -d "$version_dir" ]; then
              version=$(basename "$version_dir")
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                VERSIONS_JSON+=","
              fi
              VERSIONS_JSON+="{\"slug\":\"$version\",\"label\":\"$version\"}"
            fi
          done
          VERSIONS_JSON+="]"
          
          # Update astro.config.mjs with new versions
          if [ -f "astro.config.mjs" ]; then
            # Create backup
            cp astro.config.mjs astro.config.mjs.bak
            
            # Replace versions array using sed
            sed -i.tmp "s/versions: \[.*\]/versions: $VERSIONS_JSON/" astro.config.mjs
            rm astro.config.mjs.tmp
            
            echo "Updated Astro config with versions: $VERSIONS_JSON"
          else
            echo "Warning: astro.config.mjs not found"
          fi

          cd "$DOCS"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add --all

          if ! git diff-index --quiet HEAD 2>/dev/null; then
            echo "Changes detected, committing..."
            if git commit -m "Auto-update docs from workflow" 2>/dev/null; then
              if git push origin main 2>/dev/null; then
                echo "Successfully pushed changes"
              else
                echo "Error: Failed to push changes"
                exit 1
              fi
            else
              echo "Error: Failed to commit changes"
              exit 1
            fi
          else
            echo "No changes to commit"
          fi

      - name: Upload Artifacts!
        if: github.ref_name == 'main'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          retention-days: 1
          path: ./docs/dist


  deploy:
    if: github.ref_name == 'main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          repository: defenseunicorns/pepr-docs
          ref: deploy
          path: ./docs

      - name: Clear previously deployed content!
        run: |
          cd "$DOCS"
          rm -rf dist

      - uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./docs/dist

      - name: Deploy the docs!
        run: |
          BRANCH=deploy

          cd "$DOCS"
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add --all
          if ! git diff-index --quiet HEAD 2>/dev/null; then
            if git commit -m "Auto-deploy docs" 2>/dev/null; then
              if git push origin "$BRANCH" 2>/dev/null; then
                echo "Successfully deployed docs"
              else
                echo "Error: Failed to push to deploy branch"
                exit 1
              fi
            else
              echo "Error: Failed to commit deployment"
              exit 1
            fi
          else
            echo "No changes to deploy"
          fi
