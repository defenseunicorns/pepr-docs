<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>â€“ Actions</title><link>/v0.31.0/user-guide/actions/</link><description>Recent content in Actions on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="/v0.31.0/user-guide/actions/index.xml" rel="self" type="application/rss+xml"/><item><title>V0.31.0: Mutate</title><link>/v0.31.0/user-guide/actions/mutate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v0.31.0/user-guide/actions/mutate/</guid><description>
&lt;p>Mutating admission webhooks are invoked first and can modify objects sent to the API server to enforce custom defaults. After an object is sent to Pepr&amp;rsquo;s Mutating Admission Webhook, Pepr will &lt;a href="https://github.com/defenseunicorns/pepr/blob/f01f5eeda16c13ecd0d51b26b8a16ed7e4c1b080/src/lib/mutate-processor.ts#l64">annotate the object&lt;/a> to indicate the status.&lt;/p>
&lt;p>After a successful mutation of an object in a module with UUID static-test, and capability name hello-pepr, expect to see this annotation: &lt;code>static-test.pepr.dev/hello-pepr: succeeded&lt;/code>.&lt;/p>
&lt;h1 id="helpers">Helpers&lt;/h1>
&lt;h3 id="setlabel">&lt;code>SetLabel&lt;/code>&lt;/h3>
&lt;p>&lt;code>SetLabel&lt;/code> is used to set a lable on a Kubernetes object as part of a Pepr Mutate action.&lt;/p>
&lt;p>For example, to add a label when a ConfigMap is created:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>When(a.ConfigMap)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .IsCreated()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Mutate(request &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Here we are adding a label to the ConfigMap.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> .SetLabel(&lt;span style="color:#f1fa8c">&amp;#34;pepr&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;was-here&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Note that we are not returning anything here. This is because Pepr is tracking the changes in each action automatically.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="removelabel">&lt;code>RemoveLabel&lt;/code>&lt;/h3>
&lt;p>&lt;code>RemoveLabel&lt;/code> is used to remove a label on a Kubernetes object as part of a Pepr Mutate action.&lt;/p>
&lt;p>For example, to remove a label when a ConfigMap is updated:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>When(a.ConfigMap)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .IsCreated()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Mutate(request &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Here we are removing a label from the ConfigMap.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> .RemoveLabel(&lt;span style="color:#f1fa8c">&amp;#34;remove-me&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Note that we are not returning anything here. This is because Pepr is tracking the changes in each action automatically.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="setannotation">&lt;code>SetAnnotation&lt;/code>&lt;/h3>
&lt;p>&lt;code>SetAnnotation&lt;/code> is used to set an annotation on a Kubernetes object as part of a Pepr Mutate action.&lt;/p>
&lt;p>For example, to add an annotation when a ConfigMap is created:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>When(a.ConfigMap)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .IsCreated()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Mutate(request &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Here we are adding an annotation to the ConfigMap.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> .SetAnnotation(&lt;span style="color:#f1fa8c">&amp;#34;pepr.dev&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;annotations-work-too&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Note that we are not returning anything here. This is because Pepr is tracking the changes in each action automatically.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="removeannotation">&lt;code>RemoveAnnotation&lt;/code>&lt;/h3>
&lt;p>&lt;code>RemoveAnnotation&lt;/code> is used to remove an annotation on a Kubernetes object as part of a Pepr Mutate action.&lt;/p>
&lt;p>For example, to remove an annotation when a ConfigMap is updated:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>When(a.ConfigMap)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .IsUpdated()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .Mutate(request &lt;span style="color:#ff79c6">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> request
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Here we are removing an annotation from the ConfigMap.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> .RemoveAnnotation(&lt;span style="color:#f1fa8c">&amp;#34;remove-me&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6272a4">// Note that we are not returning anything here. This is because Pepr is tracking the changes in each action automatically.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span> });
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="see-also">See Also&lt;/h2>
&lt;p>Looking for some more generic helpers? Check out the &lt;a href="../../sdk/">Module Author SDK&lt;/a> for information on other things that Pepr can help with.&lt;/p></description></item><item><title>V0.31.0: Validate</title><link>/v0.31.0/user-guide/actions/validate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v0.31.0/user-guide/actions/validate/</guid><description>
&lt;p>After the Mutation phase comes the Validation phase where the validating admission webhooks are invoked and can reject requests to enforce custom policies.&lt;/p>
&lt;p>Validate does not annotate the objects that are allowed into the cluster, but the validation webhook can be audited with &lt;code>npx pepr monitor&lt;/code>. Read the &lt;a href="https://docs.pepr.dev/main/best-practices/#monitoring">monitoring docs&lt;/a> for more information.&lt;/p></description></item><item><title>V0.31.0: Reconcile</title><link>/v0.31.0/user-guide/actions/reconcile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v0.31.0/user-guide/actions/reconcile/</guid><description>
&lt;p>Reconcile functions the same as Watch but is tailored for building Kubernetes Controllers and Operators because it processes callback operations in a &lt;a href="https://github.com/defenseunicorns/pepr/blob/f01f5eeda16c13ecd0d51b26b8a16ed7e4c1b080/src/lib/watch-processor.ts#l86">Queue&lt;/a>, guaranteeing ordered and synchronous processing of events, even when the system may be under heavy load.&lt;/p></description></item><item><title>V0.31.0: Watch</title><link>/v0.31.0/user-guide/actions/watch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/v0.31.0/user-guide/actions/watch/</guid><description>
&lt;p>&lt;a href="https://kubernetes.io/docs/reference/using-api/api-concepts">Kubernetes&lt;/a> supports efficient change notifications on resources via watches. Pepr uses the Watch action for monitoring resources that previously existed in the cluster and for performing long-running asynchronous events upon receiving change notifications on resources, as watches are not limited by &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#timeouts">timeouts&lt;/a>.&lt;/p></description></item></channel></rss>